# Generated by Django 5.2.1 on 2025-10-14 06:21

from django.db import migrations
import os


def migrate_documents_to_library(apps, schema_editor):
    """
    Migrate existing contract_agreement and permits_licenses files
    from ProjectProfile to ProjectDocument model.
    """
    ProjectProfile = apps.get_model('project_profiling', 'ProjectProfile')
    ProjectDocument = apps.get_model('project_profiling', 'ProjectDocument')

    migrated_count = 0

    for project in ProjectProfile.objects.all():
        # Migrate contract_agreement
        if project.contract_agreement:
            try:
                # Check if document already exists to avoid duplicates
                existing_contract = ProjectDocument.objects.filter(
                    project=project,
                    document_type='CONTRACT',
                    title__icontains='Contract Agreement'
                ).first()

                if not existing_contract:
                    doc = ProjectDocument.objects.create(
                        project=project,
                        document_type='CONTRACT',
                        project_stage='INIT',
                        title=f'Contract Agreement - {project.project_name}',
                        description='Migrated from project contract_agreement field',
                        file=project.contract_agreement.name,  # Reuse existing file path
                        version='1.0',
                        uploaded_by=project.created_by,
                        is_mandatory=True,
                        file_size=project.contract_agreement.size if project.contract_agreement else 0
                    )
                    migrated_count += 1
                    print(f"✓ Migrated contract for project: {project.project_name}")
            except Exception as e:
                print(f"✗ Error migrating contract for {project.project_name}: {e}")

        # Migrate permits_licenses
        if project.permits_licenses:
            try:
                # Check if document already exists to avoid duplicates
                existing_permit = ProjectDocument.objects.filter(
                    project=project,
                    document_type='PERMIT',
                    title__icontains='Permits & Licenses'
                ).first()

                if not existing_permit:
                    doc = ProjectDocument.objects.create(
                        project=project,
                        document_type='PERMIT',
                        project_stage='INIT',
                        title=f'Permits & Licenses - {project.project_name}',
                        description='Migrated from project permits_licenses field',
                        file=project.permits_licenses.name,  # Reuse existing file path
                        version='1.0',
                        uploaded_by=project.created_by,
                        is_mandatory=True,
                        file_size=project.permits_licenses.size if project.permits_licenses else 0
                    )
                    migrated_count += 1
                    print(f"✓ Migrated permits for project: {project.project_name}")
            except Exception as e:
                print(f"✗ Error migrating permits for {project.project_name}: {e}")

    print(f"\n{'='*60}")
    print(f"Migration complete: {migrated_count} documents migrated to Document Library")
    print(f"{'='*60}")


def reverse_migration(apps, schema_editor):
    """
    Reverse migration - delete migrated documents
    """
    ProjectDocument = apps.get_model('project_profiling', 'ProjectDocument')

    # Delete documents that were migrated (identified by description)
    deleted = ProjectDocument.objects.filter(
        description__icontains='Migrated from project'
    ).delete()

    print(f"Reverse migration: {deleted[0]} documents removed from Document Library")


class Migration(migrations.Migration):

    dependencies = [
        ('project_profiling', '0012_alter_projectbudget_category_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_documents_to_library, reverse_migration),
    ]
